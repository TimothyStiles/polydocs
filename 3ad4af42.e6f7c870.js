(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{148:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(2),i=a(9),o=(a(0),a(172)),s={id:"cli-hashing",title:"Hashing Sequences"},r={id:"cli-hashing",isDocsHomePage:!1,title:"Hashing Sequences",description:"poly provides what is likely the only open source sequence hashing tool that handles circular sequences. By utilizing Booth's Least Rotation algorithm we're able to determistically rotate circular sequences to a fixed point which makes it possible to hash them. More info on Booth's Least Rotation here.",source:"@site/docs/cli-hashing.md",permalink:"/polydocs/docs/cli-hashing",editUrl:"https://github.com/timothystiles/poly/edit/prime/docs/cli-hashing.md",sidebar:"someSidebar",previous:{title:"Converting Sequence Files",permalink:"/polydocs/docs/cli-converting"},next:{title:"Sequence Input Output",permalink:"/polydocs/docs/library-io"}},l=[{value:"Hashing a sequence from file",id:"hashing-a-sequence-from-file",children:[]},{value:"Hashing a sequence from a stream",id:"hashing-a-sequence-from-a-stream",children:[]},{value:"Converting a sequence to JSON and hashing a sequence from a stream",id:"converting-a-sequence-to-json-and-hashing-a-sequence-from-a-stream",children:[]},{value:"Hashing multiple file inputs and writing strings to stdout",id:"hashing-multiple-file-inputs-and-writing-strings-to-stdout",children:[]},{value:"Hashing multiple file inputs and writing out to JSON file",id:"hashing-multiple-file-inputs-and-writing-out-to-json-file",children:[]},{value:"Hashing multiple file inputs and streaming to stdout",id:"hashing-multiple-file-inputs-and-streaming-to-stdout",children:[]},{value:"Hashing a sequence with a different hashing function",id:"hashing-a-sequence-with-a-different-hashing-function",children:[]},{value:"Hashing with a system call",id:"hashing-with-a-system-call",children:[]},{value:"More Info",id:"more-info",children:[]}],c={rightToc:l};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly")," provides what is likely the only open source sequence hashing tool that handles circular sequences. By utilizing Booth's Least Rotation algorithm we're able to determistically rotate circular sequences to a fixed point which makes it possible to hash them. ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"#more-info"}),"More info on Booth's Least Rotation here"),"."),Object(o.b)("p",null,"Hashes make incredibly powerful unique identifiers and with ",Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," defaulting to the superfast blake3 hashing algorithm you can create them faster than ever before."),Object(o.b)("h2",{id:"hashing-a-sequence-from-file"},"Hashing a sequence from file"),Object(o.b)("p",null,"To hash a sequence from file all you have to do is this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly hash bsub.gbk\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," will then parse the sequence string, rotate it to a deterministic point if it's circular, then hash it using the default blake3 algorithm returning something like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"949b2e18461fc354d989b14f8d4a58f710f3f46968b6bbffdbdc59a28ad77e83\n")),Object(o.b)("h2",{id:"hashing-a-sequence-from-a-stream"},"Hashing a sequence from a stream"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," can also accept input from streams to create a hash:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cat bsub.gbk | poly ha -i gbk\n")),Object(o.b)("h2",{id:"converting-a-sequence-to-json-and-hashing-a-sequence-from-a-stream"},"Converting a sequence to JSON and hashing a sequence from a stream"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cat bsub.gbk | poly ha -i gbk -o json > bsub.json\n")),Object(o.b)("h2",{id:"hashing-multiple-file-inputs-and-writing-strings-to-stdout"},"Hashing multiple file inputs and writing strings to stdout"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," can also take all files in a directory and spit out their hashes along with their original file paths."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly ha *.gbk *.gb *.gff\n")),Object(o.b)("p",null,"Result:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"4031e1971acc8ff1bf0aa4ed623bc58beefc15e043075866a0854d592d80b28b   puc19.gbk\ne35849d7d9d5476e84468f8527c1c8b8a0d4b6a2cf88d4329246b1cbba0920bc   sample.gbk\n949b2e18461fc354d989b14f8d4a58f710f3f46968b6bbffdbdc59a28ad77e83   bsub.gbk\n")),Object(o.b)("h2",{id:"hashing-multiple-file-inputs-and-writing-out-to-json-file"},"Hashing multiple file inputs and writing out to JSON file"),Object(o.b)("p",null,"This is pretty much the same as ",Object(o.b)("inlineCode",{parentName:"p"},"poly convert")," but also hashes the sequence and stores the hash and meta info in the resulting jsons' Sequence struct."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly ha -o json *.gbk *.gb *.gff\n")),Object(o.b)("h2",{id:"hashing-multiple-file-inputs-and-streaming-to-stdout"},"Hashing multiple file inputs and streaming to stdout"),Object(o.b)("p",null,"I really woudn't recommend this but with the ",Object(o.b)("inlineCode",{parentName:"p"},"--stdout")," flag you can force all ",Object(o.b)("inlineCode",{parentName:"p"},"json")," output to be streamed to stdout. Useful if you want to start a bash process with hashes."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly ha -o json --stdout *.gbk \n")),Object(o.b)("h2",{id:"hashing-a-sequence-with-a-different-hashing-function"},"Hashing a sequence with a different hashing function"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," provides the option to use different hashing functions with the ",Object(o.b)("inlineCode",{parentName:"p"},"-f")," flag. Almost every hashing function available to Golang is available to ",Object(o.b)("inlineCode",{parentName:"p"},"poly hash"),". For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly hash -f sha1 bsub.gbk\n")),Object(o.b)("p",null,"Will produce a sha1 hash. For a complete list of hashes and their flags check out the original source code ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/TimothyStiles/poly/blob/346e3eb58cdd74db14eba333ba428256f77c93b0/commands.go#L256"}),"here"),". Hash flag values are case insensitive."),Object(o.b)("h2",{id:"hashing-with-a-system-call"},"Hashing with a system call"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," also provides the ",Object(o.b)("inlineCode",{parentName:"p"},"no")," argument to the function flag ",Object(o.b)("inlineCode",{parentName:"p"},"-f"),". What this does is it pipes an unhashed sequence string to stdout to be consumed by another application."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"poly hash -f sha1 data/puc19.gbk\n# returns: e5066a52a8b91eb8949b813347931f80e409b7c2\n\npoly hash -f no data/puc19.gbk | shasum\n# returns: e5066a52a8b91eb8949b813347931f80e409b7c2  -\n")),Object(o.b)("h2",{id:"more-info"},"More Info"),Object(o.b)("p",null,"For more info about ",Object(o.b)("inlineCode",{parentName:"p"},"poly hash")," and its usage try running ",Object(o.b)("inlineCode",{parentName:"p"},"poly help hash")," or ",Object(o.b)("inlineCode",{parentName:"p"},"poly help ha")," from your command line."),Object(o.b)("p",null,"For more info about circular sequence hashing and Booth's Least Rotation algorithm check out this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.ginkgobioworks.com/2020/04/20/fast-database-lookups-for-circular-dna-sequences/"}),"dev blog")," by ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://twitter.com/hofer"}),"Josh Hoffer")," and this ridiculously hard to read ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Lexicographically_minimal_string_rotation#Booth's_Algorithm"}),"python implementation of Booth's Least Rotation on wikipedia"),"."),Object(o.b)("p",null,"For an easier to read implementation of Booth's Least Rotation you can also check out our ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/TimothyStiles/poly/blob/346e3eb58cdd74db14eba333ba428256f77c93b0/hash.go#L40"}),"original implementation"),"."))}b.isMDXComponent=!0},172:function(e,t,a){"use strict";a.d(t,"a",(function(){return h})),a.d(t,"b",(function(){return d}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=b(a),p=n,d=h["".concat(s,".").concat(p)]||h[p]||u[p]||o;return a?i.a.createElement(d,r(r({ref:t},c),{},{components:a})):i.a.createElement(d,r({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,s[1]=r;for(var c=2;c<o;c++)s[c]=a[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);